function getData(endpoint){return new Promise((resolve,reject)=>{const xhr=new XMLHttpRequest;xhr.open("GET",endpoint),xhr.onreadystatechange=function(){4===this.readyState&&(200===this.status?resolve(JSON.parse(this.responseText)):reject("Error: Something went wrong"))},setTimeout(()=>{xhr.send()},Math.floor(3e3*Math.random())+1e3)})}async function getAllData(){const movies=await getData("./movies.json"),actors=await getData("./actors.json"),directors=await getData("./directors.json");console.log(movies,actors,directors)}const getAllDataWithFetch=async()=>{const moviesRes=await fetch("./movies.json"),movies=await moviesRes.json(),actorsRes=await fetch("./actors.json"),actors=await actorsRes.json(),directorsRes=await fetch("./directors.json"),directors=await directorsRes.json();console.log(movies,actors,directors)},getAllDataPromiseAll=async()=>{const[moviesRes,actorsRes,directorsRes]=await Promise.all([fetch("./movies.json"),fetch("./actors.json"),fetch("./directors.json")]),movies=await moviesRes.json(),actors=await actorsRes.json(),directors=await directorsRes.json();console.log(movies,actors,directors)},getAllDataPromiseAll2=async()=>{const[movies,actors,directors]=await Promise.all([fetch("./movies.json").then(res=>res.json()),fetch("./actors.json").then(res=>res.json()),fetch("./directors.json").then(res=>res.json())]);console.log(movies,actors,directors)};getAllDataPromiseAll2();